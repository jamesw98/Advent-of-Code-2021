#!csharp

using System;
using System.Text.RegularExpressions;
using System.Collections;

class Day4 {

    private string[] lines;
    private int[] nums;
    private ArrayList boards;

    public Day4(string[] lines) {
        this.lines = lines;
        this.nums = new int[100];
        this.boards = new ArrayList();
        
        // get the first line, the numbers being called for bingo
        string[] split = this.lines[0].Split(",");
        for (int i = 0; i < 100; i++) {
            this.nums[i] = int.Parse(split[i]);
        }
        
        // create all boards
        ArrayList tempLines = new ArrayList();
        for (int i = 2; i < this.lines.Length; i++) {
            // after a board has been read, create the board and add it to the list of boards
            if (lines[i] == "") {
                this.boards.Add(createBoard(tempLines));
                tempLines.Clear();
            }
            else {
                tempLines.Add(lines[i]);
            }
        }
        // add the final board, since the file doesn't end with an empty line
        this.boards.Add(createBoard(tempLines));
    }

    // get the first bingo
    public int Part1() {
        // call out each number
        foreach (int num in this.nums) {
            // check if a board has the number being called and mark it
            checkBoardsForNum(num);
            
            // check all the boards for a bingo
            foreach (int[,] board in this.boards) {
                // if theres a bingo, get the sum of all the unmarked numbers
                if (checkForBingo(board)) {
                    // get the answer
                    return getBoardSum(board) * num;
                }
            }
        }
        return -1;
    }

    // get the last bingo
    public int Part2() {
        // used for keeping track of bingos, getting the last bingo is O(1)
        Stack bingos = new Stack();

        // call out each number
        foreach (int num in this.nums) {
            // check if a board has the number being called and mark it
            checkBoardsForNum(num);
            
            // check all the boards for a bingo
            for (int i = 0; i < this.boards.Count; i++) {
                int[,] board = (int[,]) this.boards[i];

                // if theres a bingo, get the sum of all the unmarked numbers
                if (checkForBingo(board)) {
                    // add the value to the bingo stack
                    bingos.Push(getBoardSum(board) * num);
                    // remove the current board from the list of bingo boards to loop through
                    this.boards.Remove(this.boards[i]);
                }
            }
        }
        // get the last board that bingod 
        return (int) bingos.Pop();
    }

    // returns the sum of all the unmarked numbers for a board
    private int getBoardSum(int[,] board) {
        int sum = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                if (board[i, j] != -1) {
                    sum += board[i, j];
                }
            }
        }
        return sum;
    }

    // checks if a board has a bingo
    private Boolean checkForBingo(int[,] board) {
        // loop through each row and column
        for (int i = 0; i < 5; i++) {
            // check column
            if (board[i, 0] == -1 && board[i, 1] == -1 && board[i, 2] == -1 && board[i, 3] == -1 && board[i, 4] == -1) {
                return true;                
            }
            // check row
            else if (board[0, i] == -1 && board[1, i] == -1 && board[2, i] == -1 && board[2, i] == -1 && board[3, i] == -1 && board[4, i] == -1) {
                return true;
            }
        }
        return false;
    }

    // checks a board for a specific number
    private void checkBoardsForNum(int num) {
        foreach (int[,] board in this.boards) {
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 5; j++) {
                    if (board[i, j] == num) {
                        // -1 indicates that it has been marked
                        board[i, j] = -1;
                    }
                }
            }
        }
    }

    // creates a board from the input
    private int[,] createBoard(ArrayList lines) {
        int[,] tempBoard = new int[5, 5];

        int y = 0;
        foreach (string l in lines) {
            int x = 0;

            foreach (string i in Regex.Replace(l, @"\s+", " ").Split(" ")) {
                if (i == "") {
                    continue;
                }
                tempBoard[y, x] = int.Parse(i);
                x++;
            }
            y++;
        }
        return tempBoard;
    }
}

#!csharp

string[] lines = System.IO.File.ReadAllLines("d4_input.txt");
var D4 = new Day4(lines);
Console.WriteLine(D4.Part1()); // 23177
Console.WriteLine(D4.Part2()); // 6804
