#!csharp

using System;
using System.Collections;
using System.Text.RegularExpressions;

class Day5 {

    private string[] lines;

    public Day5(string[] lines) {
        this.lines = lines;
    }

    public int Part1() {
        Dictionary<(int, int), int> pointsTouched = getDict(false);

        int count = 0;

        foreach (KeyValuePair<(int, int), int> entry in pointsTouched) {
            if (entry.Value > 1) count++;
        }

        return count;
    }

    private Dictionary<(int, int), int> getDict(bool part2) {
        Dictionary<(int, int), int> pointsTouched = new Dictionary<(int, int), int>();

        // loop through all lines
        foreach (string line in this.lines) {
            Regex rx = new Regex(@"(\d+),(\d+) -> (\d+),(\d+)");
            var match = rx.Match(line);
            
            // get the values as ints
            int x1 = int.Parse(match.Groups[1].Value);
            int y1 = int.Parse(match.Groups[2].Value);
            int x2 = int.Parse(match.Groups[3].Value);
            int y2 = int.Parse(match.Groups[4].Value);
            
            // if y is the same, get points across x
            if (y1 == y2) {
                for (int i = Math.Min(x1, x2); i <= Math.Max(x1, x2); i++) {
                    (int, int) point = (i, y1);
                    
                    // if dict already contains this point, add to it's total collisions
                    if (pointsTouched.ContainsKey(point)) {
                        pointsTouched[point] = pointsTouched[point] + 1;
                    }
                    // add point to dict with default collision of 1
                    else {
                        pointsTouched.Add(point, 1);
                    }
                }
            }
            // if x is the same, get points across y
            else if (x1 == x2) {
                for (int i = Math.Min(y1, y2); i <= Math.Max(y1, y2); i++) {
                    (int, int) point = (x1, i);
                    
                    // if dict already contains this point, add to it's total collisions
                    if (pointsTouched.ContainsKey(point)) {
                        pointsTouched[point] = pointsTouched[point] + 1;
                    }
                    // add point to dict with default collision of 1
                    else {
                        pointsTouched.Add(point, 1);
                    }
                }
            }
            // do spooky diag stuff
            else if (part2) {

                (int, int) point = (-1,-1);
                while(x1 != x2 && y1 != y2) {
                    point = (x1, y1);

                    if (pointsTouched.ContainsKey(point)) {
                        pointsTouched[point] = pointsTouched[point] + 1;
                    }
                    // add point to dict with default collision of 1
                    else {
                        pointsTouched.Add(point, 1);
                    }

                    if (x1 > x2) {
                        x1--;
                    }
                    else {
                        x1++;
                    }
                    
                    if (y1 > y2) {
                        y1--;
                    }
                    else {
                        y1++;
                    }
                }
                if (pointsTouched.ContainsKey(point)) {
                    pointsTouched[point] = pointsTouched[point] + 1;
                }
                // add point to dict with default collision of 1
                else {
                    pointsTouched.Add(point, 1);
                }
            }
        }
        return pointsTouched;
    }

    public int Part2() {
        Dictionary<(int, int), int> pointsTouched = getDict(true);

        int count = 0;

        foreach (KeyValuePair<(int, int), int> entry in pointsTouched) {
            if (entry.Value > 1) count++;
        }

        return count;
    }
}

#!csharp

string[] lines = System.IO.File.ReadAllLines("small.txt");
var D5 = new Day5(lines);
Console.WriteLine(D5.Part1()); // 6113
Console.WriteLine(D5.Part2()); 
